{
  "dfs": {
    "title": "Depth First Search (DFS)",
    "overview": "<div class=\"container\">\r\n            <h1>DFS - Depth-First Search<\/h1>\r\n            <p>\r\n            DFS (Depth-First Search) l\u00E0 thu\u1EADt to\u00E1n duy\u1EC7t (hay t\u00ECm ki\u1EBFm) \u0111\u1ED3 th\u1ECB ho\u1EB7c c\u00E2y theo chi\u1EC1u s\u00E2u, ngh\u0129a l\u00E0 t\u1EEB m\u1ED9t n\u00FAt g\u1ED1c (source), n\u00F3 \u0111i s\u00E2u theo m\u1ED9t nh\u00E1nh cho \u0111\u1EBFn khi kh\u00F4ng c\u00F2n n\u00FAt n\u00E0o \u0111\u1EC3 \u0111i ti\u1EBFp, sau \u0111\u00F3 quay lui (backtrack) \u0111\u1EC3 ti\u1EBFp t\u1EE5c v\u1EDBi c\u00E1c nh\u00E1nh c\u00F2n l\u1EA1i. \r\n            <\/p>\r\n            <p>\r\n            DFS th\u01B0\u1EDDng \u0111\u01B0\u1EE3c d\u00F9ng \u0111\u1EC3:  \r\n            <\/p>\r\n            <ul>\r\n                <li>Kh\u00E1m ph\u00E1 to\u00E0n b\u1ED9 c\u00E1c n\u00FAt trong \u0111\u1ED3 th\u1ECB ho\u1EB7c c\u00E2y.<\/li>\r\n                <li>Ph\u00E1t hi\u1EC7n chu tr\u00ECnh (cycle detection).<\/li>\r\n                <li>T\u00ECm th\u00E0nh ph\u1EA7n li\u00EAn th\u00F4ng trong \u0111\u1ED3 th\u1ECB.<\/li>\r\n                <li>L\u00E0 b\u01B0\u1EDBc quan tr\u1ECDng trong nhi\u1EC1u thu\u1EADt to\u00E1n kh\u00E1c:<\/li>\r\n                <ul>\r\n                    <li>Topological Sort (s\u1EAFp x\u1EBFp topo).<\/li>\r\n                    <li>T\u00ECm Strongly Connected Components (SCC \u2013 th\u00E0nh ph\u1EA7n li\u00EAn th\u00F4ng m\u1EA1nh).<\/li>\r\n                    <li>T\u00ECm c\u1EA7u (bridge), \u0111\u1EC9nh kh\u1EDBp (articulation point).<\/li>\r\n                <\/ul>\r\n            <\/ul>\r\n            <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/7\/7f\/Depth-First-Search.gif\" alt = \"Minh h\u1ECDa DFS\">\r\n\r\n            <h2>\u00DD t\u01B0\u1EDFng (Idea)<\/h2>\r\n            <ul>\r\n                <li>B\u1EAFt \u0111\u1EA7u t\u1EEB n\u00FAt ngu\u1ED3n (source), \u0111\u00E1nh d\u1EA5u n\u00F3 l\u00E0 \u0111\u00E3 th\u0103m (visited).<\/li>\r\n                <li>V\u1EDBi m\u1ED7i n\u00FAt k\u1EC1 (neighbor) c\u1EE7a n\u00F3:\r\n                    <ul>\r\n                        <li>N\u1EBFu n\u00FAt k\u1EC1 ch\u01B0a \u0111\u01B0\u1EE3c th\u0103m, \u0111\u1EC7 quy g\u1ECDi DFS tr\u00EAn n\u00FAt \u0111\u00F3.<\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n                <li>Khi \u0111i h\u1EBFt nh\u00E1nh th\u00EC quay lui (backtrack) \u0111\u1EC3 th\u0103m c\u00E1c nh\u00E1nh kh\u00E1c.<\/li>\r\n            <\/ul>\r\n            <p>DFS c\u00F3 th\u1EC3 tri\u1EC3n khai theo 2 c\u00E1ch: <\/p>\r\n            <ul>\r\n                <li>\u0110\u1EC7 quy (recursive).<\/li>\r\n                <li>Ng\u0103n x\u1EBFp (stack) thay cho \u0111\u1EC7 quy.<\/li>\r\n            <\/ul>\r\n            <h2>Thu\u1EADt to\u00E1n (Algorithm)<\/h2>\r\n            <pre>\r\n            DFS(graph, start):\r\n                mark start as visited\r\n                for each neighbor of start:\r\n                    if neighbor not visited:\r\n                        DFS(graph, neighbor)\r\n            <\/pre>\r\n\r\n            <h2>M\u00E3 gi\u1EA3 (Pseudocode)<\/h2>\r\n            <pre>\r\n            DFS(Graph G, node u):\r\n                visited[u] = true\r\n                for each v in neighbors(u):\r\n                    if not visited[v]:\r\n                        parent[v] = u\r\n                        DFS(G, v)\r\n\r\n            <\/pre>\r\n            <ul>\r\n                <li><b>neighbors(u)<\/b> l\u00E0 c\u00E1c \u0111\u1EC9nh k\u1EC1 c\u1EE7a c\u1EE7a <b>u<\/b>.<\/li>\r\n                <li><b>parent[v] <\/b> l\u01B0u l\u1EA1i cha c\u1EE7a <b>v<\/b> \u0111\u1EC3 t\u00E1i t\u1EA1o \u0111\u01B0\u1EDDng \u0111i.<\/li>\r\n            <\/ul>\r\n\r\n            <h2>Tri\u1EC3n khai b\u1EB1ng c\u00E1c ng\u00F4n ng\u1EEF ph\u1ED5 bi\u1EBFn<\/h2>\r\n            <b>Code C++<\/b>\r\n            <pre>\r\n            #include<bits\/stdc++.h>\r\n            using namespace std;\r\n            bool visited[1001];\r\n            vector<int>adj[1001];\r\n            void Intput()\r\n            {\r\n                int n, m;\r\n                cin >>n >>m;\r\n                for(int i = 0; i<m; i++)\r\n                {\r\n                    int x, y; cin >>x >>y;\r\n                    adj[x].push_back(y);\r\n                    adj[y].push_back(x);\r\n                }\r\n                memset(visited, false, sizeof(visited));\r\n            }\r\n            void DFS(int u)\r\n            {\r\n                cout<< u<<\" \";\r\n\r\n                \/\/ th\u0103m \u0111\u1EC9nh u \u0111\u00E3 x\u00E9t\r\n                visited[u]=true;\r\n                \r\n                \/\/ duy\u1EC7t t\u1EA5t c\u1EA3 c\u00E1c \u0111\u1EC9nh k\u1EC1 v\u1EDBi \u0111\u1EC9nh u\r\n                for(int v:adj[u]\r\n                ){\r\n                    if(visited[v]!=true)\r\n                    {\r\n                        DFS(v);\r\n                    }\r\n                }\r\n            }    \r\n            int main()\r\n            {\r\n                Intput();\r\n                DFS(1);\r\n            }\r\n\r\n        <\/pre>\r\n\r\n            <b>Code Java<\/b>\r\n            <pre> <\/pre>\r\n            <b>Code Python<\/b>\r\n            <pre>   <\/pre>\r\n            \r\n            <h2>Ph\u00E2n t\u00EDch \u0111\u1ED9 ph\u1EE9c t\u1EA1p (Complexity Analysis)<\/h2>\r\n            <ul>\r\n                <li>Th\u1EDDi gian (Time Complexity): O(V + E)<\/li>\r\n                    <ul>\r\n                        <li>V l\u00E0 s\u1ED1 n\u00FAt (vertices)<\/li>\r\n                        <li>E l\u00E0 s\u1ED1 c\u1EA1nh (edges)<\/li>\r\n                        M\u1ED7i \u0111\u1EC9nh \u0111\u01B0\u1EE3c th\u0103m 1 l\u1EA7n, m\u1ED7i c\u1EA1nh duy\u1EC7t t\u1ED1i \u0111a 2 l\u1EA7n (\u0111\u1ED3 th\u1ECB v\u00F4 h\u01B0\u1EDBng).\r\n                    <\/ul>\r\n                <li>Kh\u00F4ng gian (Space Complexity): O(V)<\/li>\r\n                    <ul>\r\n                        <li>\u0110\u1EC3 l\u01B0u m\u1EA3ng visited v\u00E0 ng\u0103n x\u1EBFp \u0111\u1EC7 quy (trong tr\u01B0\u1EDDng h\u1EE3p x\u1EA5u nh\u1EA5t, stack s\u00E2u b\u1EB1ng s\u1ED1 \u0111\u1EC9nh).<\/li>\r\n                    <\/ul>\r\n            <\/ul>\r\n            <h2>T\u00EDnh ch\u1EA5t, \u0111\u1EB7c \u0111i\u1EC3m & nh\u1EEFng l\u01B0u \u00FD (Properties, Characteristic, Notes)<\/h2>\r\n            <ul>\r\n                <li>DFS duy\u1EC7t theo chi\u1EC1u s\u00E2u (depth-first).<\/li>\r\n                <pli>DFS duy\u1EC7t theo chi\u1EC1u s\u00E2u (depth-first).<\/li>\r\n                <li>S\u1EED d\u1EE5ng stack ho\u1EB7c \u0111\u1EC7 quy.<\/li>\r\n                <li>V\u1EDBi \u0111\u1ED3 th\u1ECB kh\u00F4ng li\u00EAn th\u00F4ng \u2192 c\u1EA7n l\u1EB7p DFS cho t\u1EA5t c\u1EA3 c\u00E1c \u0111\u1EC9nh ch\u01B0a th\u0103m \u0111\u1EC3 duy\u1EC7t h\u1EBFt<\/li>\r\n                <li>DFS th\u01B0\u1EDDng \u0111\u01A1n gi\u1EA3n, t\u1ED1n \u00EDt b\u1ED9 nh\u1EDB h\u01A1n BFS trong tr\u01B0\u1EDDng h\u1EE3p \u0111\u1ED3 th\u1ECB \u201Cr\u1ED9ng\u201D nh\u01B0ng kh\u00F4ng qu\u00E1 s\u00E2u.<\/li>\r\n            <\/ul>\r\n\r\n            <h2>\u1EE8ng d\u1EE5ng (Applications)<\/h2>\r\n            <p>M\u1ED9t s\u1ED1 \u1EE9ng d\u1EE5ng n\u1ED5i b\u1EADt<\/p>\r\n                <ul>\r\n                    <li>Ph\u00E1t hi\u1EC7n chu tr\u00ECnh trong \u0111\u1ED3 th\u1ECB (c\u00F3 h\u01B0\u1EDBng & v\u00F4 h\u01B0\u1EDBng).<\/li>\r\n                    <li>Ki\u1EC3m tra li\u00EAn th\u00F4ng ho\u1EB7c \u0111\u1EBFm s\u1ED1 th\u00E0nh ph\u1EA7n li\u00EAn th\u00F4ng.<\/li>\r\n                    <li>Topological Sort (s\u1EAFp x\u1EBFp topo cho DAG).<\/li>\r\n                    <li>X\u00E1c \u0111\u1ECBnh c\u1EA7u (bridge) v\u00E0 \u0111i\u1EC3m kh\u1EDBp (articulation point) trong m\u1EA1ng.<\/li>\r\n                    <li>Backtracking (gi\u1EA3i Sudoku, N-Queens, m\u00EA cung\u2026).<\/li>\r\n                    <li>Tr\u00ECnh bi\u00EAn d\u1ECBch (compiler): ph\u00E2n t\u00EDch \u0111\u1ED3 th\u1ECB ph\u1EE5 thu\u1ED9c, lu\u1ED3ng \u0111i\u1EC1u khi\u1EC3n.<\/li>\r\n                    <li>AI\/game: duy\u1EC7t tr\u1EA1ng th\u00E1i, sinh c\u00E2y tr\u00F2 ch\u01A1i.<\/li>\r\n                <\/ul>\r\n            <ul> \r\n        <\/div>"
  },
  "dijkstra": {
    "title": "Dijkstra Algorithm",
    "overview": "<div class=\"container\">\r\n        <h1>Dijkstra<\/h1>\r\n        <p>\r\n            Thu\u1EADt to\u00E1n Dijkstra l\u00E0 thu\u1EADt to\u00E1n c\u1ED5 \u0111i\u1EC3n \u0111\u1EC3 t\u00ECm \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t t\u1EEB m\u1ED9t \u0111\u1EC9nh ngu\u1ED3n \u0111\u1EBFn m\u1ECDi \u0111\u1EC9nh kh\u00E1c\r\n            trong \u0111\u1ED3 th\u1ECB c\u00F3 tr\u1ECDng s\u1ED1 kh\u00F4ng \u00E2m.\r\n            \u0110\u01B0\u1EE3c ph\u00E1t minh b\u1EDFi Edsger W. Dijkstra v\u00E0o nh\u1EEFng n\u0103m 1950, thu\u1EADt to\u00E1n n\u00E0y l\u00E0 n\u1EC1n t\u1EA3ng cho nhi\u1EC1u \u1EE9ng d\u1EE5ng nh\u01B0\r\n            \u0111\u1ECBnh tuy\u1EBFn m\u1EA1ng, h\u1EC7 th\u1ED1ng b\u1EA3n \u0111\u1ED3 v\u00E0 c\u00E1c b\u00E0i to\u00E1n t\u1ED1i \u01B0u h\u00F3a.\r\n        <\/p>\r\n\r\n        <h2>\u00DD t\u01B0\u1EDFng (Idea)<\/h2>\r\n        <ul>\r\n            <li>M\u1ED7i \u0111\u1EC9nh gi\u1EEF m\u1ED9t gi\u00E1 tr\u1ECB <code>dist[v]<\/code> bi\u1EC3u di\u1EC5n kho\u1EA3ng c\u00E1ch nh\u1ECF nh\u1EA5t \u01B0\u1EDBc t\u00EDnh t\u1EEB ngu\u1ED3n \u0111\u1EBFn v.\r\n            <\/li>\r\n            <li>Ban \u0111\u1EA7u \u0111\u1EB7t <code>dist[source] = 0<\/code> v\u00E0 <code>dist[others] = \u221E<\/code>.<\/li>\r\n            <li>L\u1EB7p: ch\u1ECDn \u0111\u1EC9nh ch\u01B0a \u0111\u01B0\u1EE3c c\u1ED1 \u0111\u1ECBnh (finalized) c\u00F3 <code>dist<\/code> nh\u1ECF nh\u1EA5t, c\u1EADp nh\u1EADt kho\u1EA3ng c\u00E1ch c\u1EE7a c\u00E1c\r\n                n\u00FAt k\u1EC1 b\u1EB1ng thao t\u00E1c \"relaxation\".<\/li>\r\n            <li>Ti\u1EBFp t\u1EE5c cho \u0111\u1EBFn khi t\u1EA5t c\u1EA3 \u0111\u1EC9nh \u0111\u01B0\u1EE3c c\u1ED1 \u0111\u1ECBnh ho\u1EB7c kh\u00F4ng c\u00F2n \u0111\u1EC9nh c\u00F3 th\u1EC3 ti\u1EBFp c\u1EADn.<\/li>\r\n        <\/ul>\r\n\r\n        <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/5\/57\/Dijkstra_Animation.gif\" alt=\"Minh h\u1ECDa Dijkstra\" \/>\r\n\r\n        <h2>Thu\u1EADt to\u00E1n (Algorithm)<\/h2>\r\n        <pre>\r\nDijkstra(graph, source):\r\n    for each vertex v in graph:\r\n        dist[v] = infinity\r\n        previous[v] = undefined\r\n    dist[source] = 0\r\n\r\n    Q = all vertices in graph (min-priority queue ordered by dist)\r\n\r\n    while Q not empty:\r\n        u = extract-min(Q)\r\n        for each neighbor v of u:\r\n            alt = dist[u] + weight(u, v)\r\n            if alt < dist[v]:\r\n                dist[v] = alt\r\n                previous[v] = u\r\n                decrease-key(Q, v, alt)\r\n    return dist[], previous[]\r\n        <\/pre>\r\n\r\n        <h2>M\u00E3 gi\u1EA3 (Pseudocode)<\/h2>\r\n        <pre>\r\nfunction Dijkstra(Graph, source):\r\n    for each vertex v in Graph:\r\n        dist[v] := infinity\r\n        prev[v] := null\r\n    dist[source] := 0\r\n    Q := min-priority-queue containing all vertices keyed by dist[]\r\n\r\n    while Q is not empty:\r\n        u := Extract-Min(Q)\r\n        for each neighbor v of u:\r\n            alt := dist[u] + length(u, v)\r\n            if alt < dist[v]:\r\n                dist[v] := alt\r\n                prev[v] := u\r\n                Decrease-Key(Q, v, alt)\r\n    return dist, prev\r\n        <\/pre>\r\n\r\n        <h2>Tri\u1EC3n khai v\u00ED d\u1EE5<\/h2>\r\n\r\n        <h3>Code C++ (s\u1EED d\u1EE5ng priority_queue)<\/h3>\r\n        <pre>\r\n#include <bits\/stdc++.h>\r\nusing namespace std;\r\nusing pii = pair<int,int>; \/\/ (dist, node)\r\n\r\nvector<vector<pair<int,int>>> adj; \/\/ adj[u] = {(v, w), ...}\r\nvector<int> dijkstra(int n, int source) {\r\n    const int INF = 1e9;\r\n    vector<int> dist(n+1, INF);\r\n    priority_queue<pii, vector<pii>, greater<pii>> pq;\r\n    dist[source] = 0;\r\n    pq.push({0, source});\r\n\r\n    while (!pq.empty()) {\r\n        auto [du, u] = pq.top(); pq.pop();\r\n        if (du != dist[u]) continue;\r\n        for (auto [v, w] : adj[u]) {\r\n            if (dist[u] + w < dist[v]) {\r\n                dist[v] = dist[u] + w;\r\n                pq.push({dist[v], v});\r\n            }\r\n        }\r\n    }\r\n    return dist;\r\n}\r\n        <\/pre>\r\n\r\n        <h3>Code Python (s\u1EED d\u1EE5ng heapq)<\/h3>\r\n        <pre>\r\nimport heapq\r\n\r\ndef dijkstra(n, adj, source):\r\n    INF = 10**18\r\n    dist = [INF] * (n + 1)\r\n    dist[source] = 0\r\n    pq = [(0, source)]\r\n    while pq:\r\n        d, u = heapq.heappop(pq)\r\n        if d != dist[u]:\r\n            continue\r\n        for v, w in adj[u]:\r\n            nd = d + w\r\n            if nd < dist[v]:\r\n                dist[v] = nd\r\n                heapq.heappush(pq, (nd, v))\r\n    return dist\r\n        <\/pre>\r\n\r\n        <h2>Ph\u00E2n t\u00EDch \u0111\u1ED9 ph\u1EE9c t\u1EA1p (Complexity Analysis)<\/h2>\r\n        <ul>\r\n            <li>Tr\u01B0\u1EDDng h\u1EE3p \u0111\u01A1n gi\u1EA3n (ma tr\u1EADn kho\u1EA3ng c\u00E1ch ho\u1EB7c t\u00ECm min b\u1EB1ng linear scan): O(V^2).<\/li>\r\n            <li>S\u1EED d\u1EE5ng priority queue (binary heap): O((V + E) log V) \u2248 O(E log V) cho \u0111\u1ED3 th\u1ECB th\u01B0a.<\/li>\r\n            <li>S\u1EED d\u1EE5ng Fibonacci heap (l\u00FD thuy\u1EBFt): O(V log V + E).<\/li>\r\n            <li>Kh\u00F4ng gian: O(V + E) \u0111\u1EC3 l\u01B0u bi\u1EC3u di\u1EC5n \u0111\u1ED3 th\u1ECB v\u00E0 m\u1EA3ng dist\/prev.<\/li>\r\n        <\/ul>\r\n\r\n        <h2>T\u00EDnh ch\u1EA5t & l\u01B0u \u00FD<\/h2>\r\n        <ul>\r\n            <li>\u0110\u00F2i h\u1ECFi: t\u1EA5t c\u1EA3 tr\u1ECDng s\u1ED1 c\u1EA1nh ph\u1EA3i kh\u00F4ng \u00E2m. N\u1EBFu c\u00F3 c\u1EA1nh \u00E2m, d\u00F9ng Bellman-Ford.<\/li>\r\n            <li>Dijkstra t\u00ECm \u0111\u01B0\u1EDDng ng\u1EAFn nh\u1EA5t t\u1EEB m\u1ED9t ngu\u1ED3n \u0111\u1EBFn m\u1ECDi \u0111\u1EC9nh kh\u00E1c (single-source shortest path).<\/li>\r\n            <li>N\u1EBFu b\u1EA1n ch\u1EC9 c\u1EA7n \u0111\u01B0\u1EDDng ng\u1EAFn nh\u1EA5t gi\u1EEFa hai \u0111\u1EC9nh, c\u00F3 th\u1EC3 d\u00F9ng bi\u1EBFn th\u1EC3 bidirectional Dijkstra \u0111\u1EC3 t\u0103ng t\u1ED1c.\r\n            <\/li>\r\n            <li>\u0110\u1ED9 ph\u1EE9c t\u1EA1p th\u1EF1c t\u1EBF ph\u1EE5 thu\u1ED9c v\u00E0o c\u1EA5u tr\u00FAc d\u1EEF li\u1EC7u cho h\u00E0ng \u0111\u1EE3i \u01B0u ti\u00EAn v\u00E0 bi\u1EC3u di\u1EC5n \u0111\u1ED3 th\u1ECB (adjacency\r\n                list hay matrix).<\/li>\r\n        <\/ul>\r\n\r\n        <h2>\u1EE8ng d\u1EE5ng (Applications)<\/h2>\r\n        <ul>\r\n            <li>H\u1EC7 th\u1ED1ng \u0111\u1ECBnh tuy\u1EBFn m\u1EA1ng (v\u00ED d\u1EE5: OSPF s\u1EED d\u1EE5ng c\u01A1 ch\u1EBF t\u01B0\u01A1ng t\u1EF1).<\/li>\r\n            <li>H\u1EC7 th\u1ED1ng b\u1EA3n \u0111\u1ED3 v\u00E0 GPS: t\u00EDnh kho\u1EA3ng c\u00E1ch t\u1ED1i thi\u1EC3u tr\u00EAn \u0111\u1ED3 th\u1ECB \u0111\u01B0\u1EDDng b\u1ED9 (khi tr\u1ECDng s\u1ED1 kh\u00F4ng \u00E2m).<\/li>\r\n            <li>Robot path planning trong m\u00F4i tr\u01B0\u1EDDng c\u00F3 chi ph\u00ED di chuy\u1EC3n kh\u00E1c nhau.<\/li>\r\n            <li>T\u1ED1i \u01B0u h\u00F3a logistics, l\u1EADp l\u1ECBch v\u00E0 ph\u00E2n t\u00EDch \u0111\u01B0\u1EDDng \u0111i trong s\u01A1 \u0111\u1ED3 v\u1EADn h\u00E0nh.<\/li>\r\n            <li>L\u00E0 nh\u00E2n t\u1ED1 c\u01A1 b\u1EA3n \u0111\u1EC3 ph\u00E1t tri\u1EC3n c\u00E1c thu\u1EADt to\u00E1n ph\u1EE9c t\u1EA1p h\u01A1n (A*, Johnson's algorithm, v.v.).<\/li>\r\n        <\/ul>\r\n\r\n        <h2>K\u1EBFt lu\u1EADn<\/h2>\r\n        <p>\r\n            Dijkstra l\u00E0 m\u1ED9t c\u00F4ng c\u1EE5 c\u1EF1c k\u1EF3 quan tr\u1ECDng trong khoa h\u1ECDc m\u00E1y t\u00EDnh v\u00E0 k\u1EF9 thu\u1EADt. V\u1EDBi vi\u1EC7c l\u1EF1a ch\u1ECDn \u0111\u00FAng c\u1EA5u\r\n            tr\u00FAc d\u1EEF li\u1EC7u (v\u00ED d\u1EE5: heap), thu\u1EADt to\u00E1n c\u00F3 th\u1EC3 x\u1EED l\u00FD hi\u1EC7u qu\u1EA3 c\u00E1c \u0111\u1ED3 th\u1ECB l\u1EDBn.\r\n            Tuy nhi\u00EAn, c\u1EA7n l\u01B0u \u00FD tr\u1ECDng s\u1ED1 c\u1EA1nh ph\u1EA3i kh\u00F4ng \u00E2m; trong c\u00E1c tr\u01B0\u1EDDng h\u1EE3p c\u00F3 c\u1EA1nh \u00E2m ho\u1EB7c y\u00EAu c\u1EA7u t\u1ED1i \u01B0u tr\u00EAn\r\n            nhi\u1EC1u ngu\u1ED3n\/\u0111a ti\u00EAu ch\u00ED, c\u1EA7n c\u00E2n nh\u1EAFc c\u00E1c thu\u1EADt to\u00E1n kh\u00E1c.\r\n        <\/p>\r\n    <\/div>"
  },
  "bfs": {
    "title": "Breadth-First Search (BFS)",
    "overview": "<div class=\"container\">\r\n            <h1>BFS - Breadth-First Search<\/h1>\r\n            <p>\r\n            BFS (Breadth-First Search) l\u00E0 thu\u1EADt to\u00E1n duy\u1EC7t (hay t\u00ECm ki\u1EBFm) \u0111\u1ED3 th\u1ECB ho\u1EB7c c\u00E2y theo c\u1EA5p \u0111\u1ED9, ngh\u0129a l\u00E0 t\u1EEB m\u1ED9t n\u00FAt g\u1ED1c (source), n\u00F3 th\u0103m t\u1EA5t c\u1EA3 c\u00E1c n\u00FAt k\u1EC1 (neighbors) \u1EDF c\u1EA5p g\u1EA7n tr\u01B0\u1EDBc khi m\u1EDF r\u1ED9ng ra xa h\u01A1n. \r\n            <\/p>\r\n            <p>\r\n            BFS th\u01B0\u1EDDng \u0111\u01B0\u1EE3c d\u00F9ng \u0111\u1EC3:  \r\n            <\/p>\r\n            <ul>\r\n                <li>T\u00ECm \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t (v\u1EC1 s\u1ED1 c\u1EA1nh) trong \u0111\u1ED3 th\u1ECB v\u00F4 tr\u1ECDng s\u1ED1 (unweighted graph).<\/li>\r\n                <li>Kh\u00E1m ph\u00E1 to\u00E0n b\u1ED9 c\u00E1c n\u00FAt c\u00F3 th\u1EC3 ti\u1EBFp c\u1EADn t\u1EEB m\u1ED9t n\u00FAt ngu\u1ED3n.<\/li>\r\n                <li>L\u00E0 b\u01B0\u1EDBc quan tr\u1ECDng trong nhi\u1EC1u thu\u1EADt to\u00E1n \u0111\u1ED3 th\u1ECB kh\u00E1c (v\u00ED d\u1EE5: c\u00E1c thu\u1EADt to\u00E1n lu\u1ED3ng c\u1EF1c \u0111\u1EA1i, ki\u1EC3m tra li\u00EAn th\u00F4ng, ki\u1EC3m tra \u0111\u1ED3 th\u1ECB hai ph\u00E2n (bipartite), v.v.).<\/li>\r\n            <\/ul>\r\n\r\n\r\n\r\n            <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/46\/Animated_BFS.gif\" alt=\"Minh h\u1ECDa BFS\">\r\n\r\n            <h2>\u00DD t\u01B0\u1EDFng (Idea)<\/h2>\r\n            <ul>\r\n                <li>B\u1EAFt \u0111\u1EA7u t\u1EEB n\u00FAt ngu\u1ED3n (source), \u0111\u00E1nh d\u1EA5u n\u00F3 l\u00E0 \u0111\u00E3 th\u0103m (visited) v\u00E0 \u0111\u01B0a v\u00E0o h\u00E0ng \u0111\u1EE3i (queue).<\/li>\r\n                <li>L\u1EB7p cho \u0111\u1EBFn khi h\u00E0ng \u0111\u1EE3i r\u1ED7ng\r\n                    <ol>\r\n                        <li>L\u1EA5y m\u1ED9t n\u00FAt u t\u1EEB \u0111\u1EA7u queue (dequeue) \u2014 \u0111\u00E2y l\u00E0 n\u00FAt hi\u1EC7n t\u1EA1i.<\/li>\r\n                        <li>V\u1EDBi m\u1ED7i n\u00FAt k\u1EC1 v c\u1EE7a u m\u00E0 ch\u01B0a \u0111\u01B0\u1EE3c th\u0103m:\r\n                            <ul>\r\n                                <li>\u0110\u00E1nh d\u1EA5u v l\u00E0 \u0111\u00E3 th\u0103m,<\/li>\r\n                                <li>G\u1EAFn cha (parent) c\u1EE7a v = u (n\u1EBFu mu\u1ED1n l\u01B0u \u0111\u01B0\u1EDDng \u0111i),<\/li>\r\n                                <li>\u0110\u01B0a v v\u00E0o queue (enqueue).<\/li>\r\n                            <\/ul>\r\n                    <\/ol>\r\n                <\/li>\r\n                <li>Khi queue r\u1ED7ng, t\u1EA5t c\u1EA3 c\u00E1c n\u00FAt c\u00F3 th\u1EC3 ti\u1EBFp c\u1EADn t\u1EEB ngu\u1ED3n \u0111\u00E3 \u0111\u01B0\u1EE3c duy\u1EC7t.<\/li>\r\n            <\/ul>\r\n            <p>M\u1ED9t phi\u00EAn b\u1EA3n m\u1EDF r\u1ED9ng c\u00F3 th\u1EC3 gi\u1EEF th\u00EAm m\u1EA3ng dist[] (kho\u1EA3ng c\u00E1ch t\u1EEB ngu\u1ED3n \u0111\u1EBFn m\u1ED7i n\u00FAt, theo s\u1ED1 c\u1EA1nh), v\u00E0 m\u1EA3ng parent[] \u0111\u1EC3 truy v\u1EBFt \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t (n\u1EBFu c\u1EA7n).<\/p>\r\n            <p>C\u00F3 th\u1EC3 hi\u1EC3u thu\u1EADt to\u00E1n nh\u01B0 m\u1ED9t ng\u1ECDn l\u1EEDa lan r\u1ED9ng tr\u00EAn \u0111\u1ED3 th\u1ECB: <\/p>\r\n            <ul>\r\n                <li>\u1EDE b\u01B0\u1EDBc \u0111\u1EA7u, ch\u1EC9 c\u00F3 \u0111\u1EC9nh ngu\u1ED3n \u0111ang ch\u00E1y.<\/li>\r\n                <li>\u1EDE m\u1ED7i b\u01B0\u1EDBc ti\u1EBFp theo, ng\u1ECDn l\u1EEDa ch\u00E1y \u1EDF \u0111\u1EC9nh hi\u1EC7n t\u1EA1i lan sang t\u1EA5t c\u1EA3 c\u00E1c \u0111\u1EC9nh k\u1EC1 v\u1EDBi n\u00F3.<\/li>\r\n                <li>Thu\u1EADt to\u00E1n l\u1EB7p l\u1EA1i qu\u00E1 tr\u00ECnh cho t\u1EDBi khi t\u1EA5t c\u1EA3 \u0111\u1EC9nh \u0111\u00E3 \u0111\u01B0\u1EE3c th\u0103m.<\/li>\r\n            <\/ul>\r\n            <h2>Thu\u1EADt to\u00E1n (Algorithm)<\/h2>\r\n            <pre>\r\n            BFS(graph, start):\r\n                create a queue Q\r\n                mark start as visited\r\n                enqueue start into Q\r\n\r\n                while Q is not empty:\r\n                    node = dequeue Q\r\n                    for each neighbor of node:\r\n                        if neighbor not visited:\r\n                            mark neighbor as visited\r\n                            enqueue neighbor\r\n            <\/pre>\r\n\r\n            <h2>M\u00E3 gi\u1EA3 (Pseudocode)<\/h2>\r\n            <pre>\r\n            BFS(Graph G, node s):\r\n                for each vertex v in G:\r\n                    visited[v] = false\r\n                    dist[v] = \u221E\r\n                    parent[v] = null\r\n\r\n                visited[s] = true\r\n                dist[s] = 0\r\n                parent[s] = null\r\n                create queue Q\r\n                enqueue(Q, s)\r\n\r\n                while Q not empty do:\r\n                    u = dequeue(Q)\r\n                    for each v in neighbors(u) do:\r\n                    if not visited[v]:\r\n                        visited[v] = true\r\n                        dist[v] = dist[u] + 1\r\n                        parent[v] = u\r\n                        enqueue(Q, v)\r\n            <\/pre>\r\n            <ul>\r\n                <li><b>neighbors(u)<\/b> l\u00E0 c\u00E1c n\u00FAt k\u1EC1 (adjacent) c\u1EE7a <b>u<\/b>.<\/li>\r\n                <li>Sau khi BFS k\u1EBFt th\u00FAc, <b>dist[v]<\/b> l\u01B0u s\u1ED1 c\u1EA1nh ng\u1EAFn nh\u1EA5t t\u1EEB <b>s<\/b> \u0111\u1EBFn <b>v<\/b> (n\u1EBFu v c\u00F3 th\u1EC3 ti\u1EBFp c\u1EADn).<\/li>\r\n                <li><b>parent[v] <\/b> l\u01B0u n\u00FAt li\u1EC1n tr\u01B0\u1EDBc <b>v<\/b> trong \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t, gi\u00FAp truy v\u1EBFt l\u1EA1i \u0111\u01B0\u1EDDng \u0111i n\u1EBFu c\u1EA7n.<\/li>\r\n            <\/ul>\r\n\r\n            <h2>Tri\u1EC3n khai b\u1EB1ng c\u00E1c ng\u00F4n ng\u1EEF ph\u1ED5 bi\u1EBFn<\/h2>\r\n            <b>Code C++<\/b>\r\n            <pre>\r\n            #include<bits\/stdc++.h>\r\n            using namespace std;\r\n            vector<int>adj[1001];\r\n            bool visited[1001];\r\n\r\n            void Input()\r\n            {\r\n                cout <<\"Nh\u1EADp s\u1ED1 \u0111\u1EC9nh, s\u1ED1 c\u1EA1nh: \";\r\n                int n, m;\r\n                cin >>n >>m;\r\n                for(int i =0; i < m; i++)\r\n                {\r\n                    int x, y;\r\n                    cin >>x >>y;\r\n                    adj[x].push_back(y);\r\n                    adj[y].push_back(x);\r\n                }\r\n                memset(visited, false, sizeof(visited));\r\n            }\r\n\r\n            void BFS(int u)\r\n            {\r\n                queue<int>q;    \/\/kh\u1EDFi t\u1EA1o h\u00E0ng \u0111\u1EE3i\r\n                q.push(u);      \/\/\u0111\u1EA9y \u0111\u1EC9nh u v\u00E0o trong h\u00E0ng \u0111\u1EE3i\r\n                visited[u]=true;\r\n                while(q.empty()!=true)\r\n                {\r\n                    int v= q.front();       \/\/l\u1EA5y \u0111\u1EC9nh \u1EDF \u0111\u1EA7u h\u00E0ng \u0111\u1EE3i;\r\n                    q.pop();            \/\/x\u00F3a \u0111\u1EC9nh ra kh\u1ECFi h\u00E0ng \u0111\u1EE3i\r\n                    cout << v <<\" \";\r\n                    for(int x : adj[v])\r\n                    {\r\n                        if(visited[x]==false)\r\n                        {\r\n                            q.push(x);\r\n                            visited[x]=true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            int main()\r\n            {\r\n                Input();\r\n                BFS(1);\r\n            }\r\n            <\/pre>\r\n\r\n            <b>Code Java<\/b>\r\n            <pre> <\/pre>\r\n            <b>Code Python<\/b>\r\n            <pre>   <\/pre>\r\n            \r\n            <h2>Ph\u00E2n t\u00EDch \u0111\u1ED9 ph\u1EE9c t\u1EA1p (Complexity Analysis)<\/h2>\r\n            <ul>\r\n                <li>Th\u1EDDi gian (Time Complexity): O(V + E)<\/li>\r\n                    <ul>\r\n                        <li>V l\u00E0 s\u1ED1 n\u00FAt (vertices)<\/li>\r\n                        <li>E l\u00E0 s\u1ED1 c\u1EA1nh (edges)<\/li>\r\n                        V\u00EC m\u1ED7i n\u00FAt \u0111\u01B0\u1EE3c th\u0103m (enqueue\/dequeue) m\u1ED9t l\u1EA7n, v\u00E0 m\u1ED7i c\u1EA1nh \u0111\u01B0\u1EE3c duy\u1EC7t t\u1ED1i \u0111a m\u1ED9t l\u1EA7n khi xem c\u00E1c n\u00FAt k\u1EC1.\r\n                    <\/ul>\r\n                <li>Kh\u00F4ng gian (Space Complexity): O(V)<\/li>\r\n                    <ul>\r\n                        <li>D\u00F9ng \u0111\u1EC3 l\u01B0u visited \/ dist \/ parent \/ queue, trong tr\u01B0\u1EDDng h\u1EE3p t\u1EC7 nh\u1EA5t queue c\u00F3 th\u1EC3 ch\u1EE9a O(V) ph\u1EA7n t\u1EED.<\/li>\r\n                    <\/ul>\r\n            <\/ul>\r\n            <p><b>Ch\u00FA \u00FD: <\/b> n\u1EBFu \u0111\u1ED3 th\u1ECB r\u1EA5t r\u1ED9ng \u1EDF m\u1ED9t c\u1EA5p \u0111\u1ED9 n\u00E0o \u0111\u00F3 (nhi\u1EC1u n\u00FAt \u1EDF c\u00F9ng kho\u1EA3ng c\u00E1ch), queue c\u00F3 th\u1EC3 l\u1EDBn \u2014 \u0111\u00F3 l\u00E0 \u0111i\u1EC3m m\u00E0 BFS t\u1ED1n b\u1ED9 nh\u1EDB.<\/p>\r\n            <h2>T\u00EDnh ch\u1EA5t, \u0111\u1EB7c \u0111i\u1EC3m & nh\u1EEFng l\u01B0u \u00FD (Properties, Characteristic, Notes)<\/h2>\r\n            <ul>\r\n                <li>BFS l\u00E0 duy\u1EC7t theo c\u1EA5p \u0111\u1ED9 (level order).<\/p>\r\n                <li>Khi b\u1EA1n l\u1EA7n \u0111\u1EA7u \u201Cth\u1EA5y\u201D m\u1ED9t n\u00FAt v (ch\u01B0a visited), th\u00EC \u0111\u01B0\u1EDDng \u0111i \u0111\u1EBFn n\u00F3 theo BFS ch\u1EAFc ch\u1EAFn l\u00E0 ng\u1EAFn nh\u1EA5t (v\u1EC1 s\u1ED1 c\u1EA1nh) t\u1EEB ngu\u1ED3n.<\/li>\r\n                <li>BFS s\u1EED d\u1EE5ng c\u1EA5u tr\u00FAc h\u00E0ng \u0111\u1EE3i (queue), kh\u00E1c v\u1EDBi DFS d\u00F9ng ng\u0103n x\u1EBFp (stack) ho\u1EB7c \u0111\u1EC7 quy.<\/li>\r\n                <li>V\u1EDBi \u0111\u1ED3 th\u1ECB kh\u00F4ng li\u00EAn th\u00F4ng (disconnected graph), b\u1EA1n c\u00F3 th\u1EC3 ch\u1EA1y BFS t\u1EEB nhi\u1EC1u ngu\u1ED3n ho\u1EB7c l\u1EB7p qua c\u00E1c n\u00FAt ch\u01B0a visited \u0111\u1EC3 \u0111\u1EA3m b\u1EA3o duy\u1EC7t h\u1EBFt to\u00E0n b\u1ED9.<\/li>\r\n                <li>BFS ch\u1EC9 \u0111\u00FAng \u0111\u1EC3 t\u00ECm \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t n\u1EBFu m\u1ECDi c\u1EA1nh c\u00F3 tr\u1ECDng s\u1ED1 b\u1EB1ng nhau (ho\u1EB7c kh\u00F4ng c\u00F3 tr\u1ECDng s\u1ED1). N\u1EBFu c\u1EA1nh c\u00F3 tr\u1ECDng s\u1ED1 kh\u00E1c nhau, c\u1EA7n d\u00F9ng thu\u1EADt to\u00E1n nh\u01B0 Dijkstra.<\/li>\r\n            <\/ul>\r\n\r\n            <h2>\u1EE8ng d\u1EE5ng (Applications)<\/h2>\r\n            <p>M\u1ED9t s\u1ED1 \u1EE9ng d\u1EE5ng n\u1ED5i b\u1EADt<\/p>\r\n                <ul>\r\n                    <li>T\u00ECm \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t trong \u0111\u1ED3 th\u1ECB v\u00F4 tr\u1ECDng s\u1ED1.<\/li>\r\n                    <li>Ki\u1EC3m tra li\u00EAn th\u00F4ng \/ nh\u00F3m k\u1EBFt n\u1ED1i trong \u0111\u1ED3 th\u1ECB.<\/li>\r\n                    <li>Ki\u1EC3m tra \u0111\u1ED3 th\u1ECB hai ph\u00E2n (bipartiteness): d\u00F9ng BFS v\u1EDBi vi\u1EC7c g\u00E1n m\u00E0u (2 m\u00E0u) cho c\u00E1c n\u00FAt khi duy\u1EC7t.<\/li>\r\n                    <li>Web crawling (tr\u00ECnh thu th\u1EADp th\u00F4ng tin web): b\u1EAFt \u0111\u1EA7u t\u1EEB m\u1ED9t URL, l\u1EA5y c\u00E1c link trong trang, r\u1ED3i ti\u1EBFp t\u1EE5c theo l\u1EDBp link k\u1EBF ti\u1EBFp, v.v.<\/li>\r\n                    <li>Tr\u00F2 ch\u01A1i \/ m\u00EA cung \/ b\u1EA3n \u0111\u1ED3 \u00F4 vu\u00F4ng: t\u00ECm b\u01B0\u1EDBc \u0111i t\u1ED1i thi\u1EC3u t\u1EEB \u0111i\u1EC3m A t\u1EDBi B.<\/li>\r\n                    <li>Trong c\u00E1c thu\u1EADt to\u00E1n lu\u1ED3ng c\u1EF1c \u0111\u1EA1i (max-flow): BFS \u0111\u01B0\u1EE3c d\u00F9ng \u0111\u1EC3 x\u00E2y d\u1EF1ng \u201Clevel graph\u201D nh\u01B0 trong thu\u1EADt to\u00E1n Dinic.<\/li>\r\n                    <li>Trong AI \/ t\u00ECm ki\u1EBFm tr\u1EA1ng th\u00E1i: BFS l\u00E0 thu\u1EADt to\u00E1n \u201Cblind search\u201D (kh\u00F4ng d\u00F9ng heuristic) \u2014 d\u00F9ng khi chi ph\u00ED c\u00E1c b\u01B0\u1EDBc b\u1EB1ng nhau.<\/li>\r\n                    <li>Song song (Parallel BFS): khi \u0111\u1ED3 th\u1ECB r\u1EA5t l\u1EDBn, ng\u01B0\u1EDDi ta ph\u00E1t tri\u1EC3n c\u00E1c phi\u00EAn b\u1EA3n BFS song song \u0111\u1EC3 ch\u1EA1y tr\u00EAn nhi\u1EC1u m\u00E1y ho\u1EB7c tr\u00EAn GPU \u0111\u1EC3 t\u0103ng hi\u1EC7u n\u0103ng.<\/li>\r\n                <\/ul>\r\n            <ul> \r\n        <\/div>"
  },
  "astar": {
    "title": "",
    "overview": "<div class=\"container\">\r\n        <h1>A* Search Algorithm<\/h1>\r\n        <p>\r\n            Thu\u1EADt to\u00E1n A* (A-star) l\u00E0 m\u1ED9t trong nh\u1EEFng thu\u1EADt to\u00E1n t\u00ECm ki\u1EBFm \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t n\u1ED5i ti\u1EBFng v\u00E0 hi\u1EC7u qu\u1EA3 nh\u1EA5t\r\n            trong tr\u00ED tu\u1EC7 nh\u00E2n t\u1EA1o (AI), \u0111\u1EB7c bi\u1EC7t trong c\u00E1c b\u00E0i to\u00E1n l\u1EADp k\u1EBF ho\u1EA1ch \u0111\u01B0\u1EDDng \u0111i (pathfinding) v\u00E0 t\u00ECm ki\u1EBFm\r\n            tr\u1EA1ng th\u00E1i (state-space search).\r\n        <\/p>\r\n        <p>\r\n            A* l\u00E0 s\u1EF1 k\u1EBFt h\u1EE3p gi\u1EEFa hai chi\u1EBFn l\u01B0\u1EE3c:\r\n        <\/p>\r\n        <ul>\r\n            <li>T\u00ECm ki\u1EBFm theo chi ph\u00ED nh\u1ECF nh\u1EA5t (Uniform Cost Search) \u2013 \u0111\u1EA3m b\u1EA3o t\u00ECm \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t.<\/li>\r\n            <li>T\u00ECm ki\u1EBFm theo heuristic (Greedy Best-First Search) \u2013 h\u01B0\u1EDBng d\u1EABn t\u00ECm ki\u1EBFm nhanh h\u01A1n d\u1EF1a v\u00E0o \u01B0\u1EDBc l\u01B0\u1EE3ng\r\n                kho\u1EA3ng c\u00E1ch c\u00F2n l\u1EA1i.<\/li>\r\n        <\/ul>\r\n\r\n        <h2>\u00DD t\u01B0\u1EDFng (Idea)<\/h2>\r\n        <p>\r\n            M\u1ED7i n\u00FAt <i>n<\/i> trong kh\u00F4ng gian t\u00ECm ki\u1EBFm \u0111\u01B0\u1EE3c g\u00E1n m\u1ED9t gi\u00E1 tr\u1ECB \u0111\u00E1nh gi\u00E1 <b>f(n)<\/b>:\r\n        <\/p>\r\n        <pre>f(n) = g(n) + h(n)<\/pre>\r\n        <ul>\r\n            <li><b>g(n)<\/b>: Chi ph\u00ED th\u1EF1c t\u1EEB \u0111i\u1EC3m b\u1EAFt \u0111\u1EA7u \u0111\u1EBFn n\u00FAt hi\u1EC7n t\u1EA1i.<\/li>\r\n            <li><b>h(n)<\/b>: Chi ph\u00ED \u01B0\u1EDBc l\u01B0\u1EE3ng (heuristic) t\u1EEB n\u00FAt hi\u1EC7n t\u1EA1i \u0111\u1EBFn \u0111\u00EDch.<\/li>\r\n            <li><b>f(n)<\/b>: T\u1ED5ng chi ph\u00ED \u01B0\u1EDBc l\u01B0\u1EE3ng t\u1EEB \u0111\u1EA7u \u2192 n \u2192 \u0111\u00EDch.<\/li>\r\n        <\/ul>\r\n        <p>\r\n            Thu\u1EADt to\u00E1n lu\u00F4n m\u1EDF r\u1ED9ng n\u00FAt c\u00F3 gi\u00E1 tr\u1ECB <b>f(n)<\/b> nh\u1ECF nh\u1EA5t, c\u00E2n b\u1EB1ng gi\u1EEFa chi ph\u00ED \u0111\u00E3 \u0111i (g) v\u00E0 chi ph\u00ED d\u1EF1\r\n            \u0111o\u00E1n c\u00F2n l\u1EA1i (h).\r\n        <\/p>\r\n\r\n        <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/9\/98\/AstarExampleEn.gif\"\r\n            alt=\"Minh h\u1ECDa A* Search\">\r\n\r\n        <h2>Thu\u1EADt to\u00E1n (Algorithm)<\/h2>\r\n        <pre>\r\nA*(start, goal):\r\n    openSet = {start}\r\n    cameFrom = empty map\r\n    gScore[start] = 0\r\n    fScore[start] = h(start)\r\n\r\n    while openSet is not empty:\r\n        current = node in openSet with lowest fScore\r\n        if current == goal:\r\n            return reconstruct_path(cameFrom, current)\r\n\r\n        remove current from openSet\r\n        for each neighbor of current:\r\n            tentative_g = gScore[current] + dist(current, neighbor)\r\n            if tentative_g < gScore[neighbor]:\r\n                cameFrom[neighbor] = current\r\n                gScore[neighbor] = tentative_g\r\n                fScore[neighbor] = gScore[neighbor] + h(neighbor)\r\n                if neighbor not in openSet:\r\n                    add neighbor to openSet\r\n    return failure\r\n            <\/pre>\r\n\r\n        <h2>M\u00E3 gi\u1EA3 (Pseudocode)<\/h2>\r\n        <pre>\r\nfunction A_Star(start, goal)\r\n    openSet \u2190 {start}\r\n    gScore[start] \u2190 0\r\n    fScore[start] \u2190 h(start)\r\n    while openSet \u2260 \u2205 do\r\n        current \u2190 node in openSet with lowest fScore\r\n        if current = goal then\r\n            return path(current)\r\n        remove current from openSet\r\n        for each neighbor of current do\r\n            tentative_g \u2190 gScore[current] + distance(current, neighbor)\r\n            if tentative_g < gScore[neighbor] then\r\n                cameFrom[neighbor] \u2190 current\r\n                gScore[neighbor] \u2190 tentative_g\r\n                fScore[neighbor] \u2190 gScore[neighbor] + h(neighbor)\r\n                if neighbor not in openSet then\r\n                    add neighbor to openSet\r\n    return failure\r\n            <\/pre>\r\n\r\n        <h2>Ph\u00E2n t\u00EDch \u0111\u1ED9 ph\u1EE9c t\u1EA1p (Complexity Analysis)<\/h2>\r\n        <ul>\r\n            <li>Th\u1EDDi gian (Time Complexity): O(E) trong tr\u01B0\u1EDDng h\u1EE3p heuristic t\u1ED1t, nh\u01B0ng c\u00F3 th\u1EC3 t\u0103ng l\u00EAn O(b<sup>d<\/sup>)\r\n                trong tr\u01B0\u1EDDng h\u1EE3p x\u1EA5u nh\u1EA5t.<\/li>\r\n            <li>Kh\u00F4ng gian (Space Complexity): O(V), do c\u1EA7n l\u01B0u tr\u1EEF danh s\u00E1ch m\u1EDF (open set), danh s\u00E1ch \u0111\u00F3ng (closed\r\n                set), gScore, fScore v\u00E0 cameFrom.<\/li>\r\n        <\/ul>\r\n        <p>\r\n            Hi\u1EC7u qu\u1EA3 c\u1EE7a A* ph\u1EE5 thu\u1ED9c v\u00E0o ch\u1EA5t l\u01B0\u1EE3ng c\u1EE7a h\u00E0m heuristic <b>h(n)<\/b>:\r\n        <\/p>\r\n        <ul>\r\n            <li>N\u1EBFu <b>h(n)<\/b> \u2264 chi ph\u00ED th\u1EF1c t\u1EBF \u0111\u1EBFn \u0111\u00EDch, A* \u0111\u01B0\u1EE3c \u0111\u1EA3m b\u1EA3o t\u1ED1i \u01B0u.<\/li>\r\n            <li>N\u1EBFu <b>h(n)<\/b> = 0 \u2192 A* tr\u1EDF th\u00E0nh Dijkstra.<\/li>\r\n            <li>N\u1EBFu <b>h(n)<\/b> qu\u00E1 l\u1EDBn \u2192 A* gi\u1ED1ng Greedy Search (nhanh h\u01A1n nh\u01B0ng kh\u00F4ng \u0111\u1EA3m b\u1EA3o t\u1ED1i \u01B0u).<\/li>\r\n        <\/ul>\r\n\r\n        <h2>V\u00ED d\u1EE5 v\u1EC1 h\u00E0m heuristic<\/h2>\r\n        <ul>\r\n            <li>Kho\u1EA3ng c\u00E1ch Manhattan: |x1 - x2| + |y1 - y2| (khi ch\u1EC9 di chuy\u1EC3n 4 h\u01B0\u1EDBng).<\/li>\r\n            <li>Kho\u1EA3ng c\u00E1ch Euclidean: \u221A((x1 - x2)\u00B2 + (y1 - y2)\u00B2) (khi di chuy\u1EC3n ch\u00E9o \u0111\u01B0\u1EE3c).<\/li>\r\n            <li>Kho\u1EA3ng c\u00E1ch Chebyshev: max(|x1 - x2|, |y1 - y2|) (khi di chuy\u1EC3n 8 h\u01B0\u1EDBng).<\/li>\r\n        <\/ul>\r\n\r\n        <h2>\u1EE8ng d\u1EE5ng (Applications)<\/h2>\r\n        <ul>\r\n            <li>T\u00ECm \u0111\u01B0\u1EDDng \u0111i trong b\u1EA3n \u0111\u1ED3 v\u00E0 game (AI pathfinding \u2013 v\u00ED d\u1EE5: Pac-Man, RTS game, GPS).<\/li>\r\n            <li>T\u00ECm ki\u1EBFm trong kh\u00F4ng gian tr\u1EA1ng th\u00E1i (state-space search).<\/li>\r\n            <li>L\u1EADp k\u1EBF ho\u1EA1ch robot (robot motion planning).<\/li>\r\n            <li>Gi\u1EA3i b\u00E0i to\u00E1n \u00F4 tr\u01B0\u1EE3t (8-puzzle, 15-puzzle).<\/li>\r\n            <li>\u0110\u1ECBnh tuy\u1EBFn m\u1EA1ng (network routing).<\/li>\r\n        <\/ul>\r\n\r\n        <h2>T\u00EDnh ch\u1EA5t v\u00E0 \u0111\u1EB7c \u0111i\u1EC3m<\/h2>\r\n        <ul>\r\n            <li>A* lu\u00F4n t\u00ECm \u0111\u01B0\u1EE3c \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t n\u1EBFu h\u00E0m heuristic l\u00E0 <b>admissible<\/b> (kh\u00F4ng v\u01B0\u1EE3t qu\u00E1 chi ph\u00ED\r\n                th\u1EADt).<\/li>\r\n            <li>L\u00E0 thu\u1EADt to\u00E1n t\u00ECm ki\u1EBFm theo th\u00F4ng tin (informed search) v\u00EC c\u00F3 s\u1EED d\u1EE5ng \u01B0\u1EDBc l\u01B0\u1EE3ng h(n).<\/li>\r\n            <li>C\u00F3 th\u1EC3 \u0111i\u1EC1u ch\u1EC9nh \u0111\u1EC3 t\u1ED1i \u01B0u t\u1ED1c \u0111\u1ED9 ho\u1EB7c \u0111\u1ED9 ch\u00EDnh x\u00E1c b\u1EB1ng c\u00E1ch thay \u0111\u1ED5i heuristic.<\/li>\r\n            <li>L\u00E0 n\u1EC1n t\u1EA3ng cho nhi\u1EC1u thu\u1EADt to\u00E1n m\u1EDF r\u1ED9ng nh\u01B0 Weighted A*, Theta*, Jump Point Search.<\/li>\r\n        <\/ul>\r\n    <\/div>"
  },
  "ffill": {
    "title": "",
    "overview": "<div class=\"container\">\r\n        <h1>Dijkstra<\/h1>\r\n        <p>\r\n            Thu\u1EADt to\u00E1n Dijkstra l\u00E0 thu\u1EADt to\u00E1n c\u1ED5 \u0111i\u1EC3n \u0111\u1EC3 t\u00ECm \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t t\u1EEB m\u1ED9t \u0111\u1EC9nh ngu\u1ED3n \u0111\u1EBFn m\u1ECDi \u0111\u1EC9nh kh\u00E1c\r\n            trong \u0111\u1ED3 th\u1ECB c\u00F3 tr\u1ECDng s\u1ED1 kh\u00F4ng \u00E2m.\r\n            \u0110\u01B0\u1EE3c ph\u00E1t minh b\u1EDFi Edsger W. Dijkstra v\u00E0o nh\u1EEFng n\u0103m 1950, thu\u1EADt to\u00E1n n\u00E0y l\u00E0 n\u1EC1n t\u1EA3ng cho nhi\u1EC1u \u1EE9ng d\u1EE5ng nh\u01B0\r\n            \u0111\u1ECBnh tuy\u1EBFn m\u1EA1ng, h\u1EC7 th\u1ED1ng b\u1EA3n \u0111\u1ED3 v\u00E0 c\u00E1c b\u00E0i to\u00E1n t\u1ED1i \u01B0u h\u00F3a.\r\n        <\/p>\r\n\r\n        <h2>\u00DD t\u01B0\u1EDFng (Idea)<\/h2>\r\n        <ul>\r\n            <li>M\u1ED7i \u0111\u1EC9nh gi\u1EEF m\u1ED9t gi\u00E1 tr\u1ECB <code>dist[v]<\/code> bi\u1EC3u di\u1EC5n kho\u1EA3ng c\u00E1ch nh\u1ECF nh\u1EA5t \u01B0\u1EDBc t\u00EDnh t\u1EEB ngu\u1ED3n \u0111\u1EBFn v.\r\n            <\/li>\r\n            <li>Ban \u0111\u1EA7u \u0111\u1EB7t <code>dist[source] = 0<\/code> v\u00E0 <code>dist[others] = \u221E<\/code>.<\/li>\r\n            <li>L\u1EB7p: ch\u1ECDn \u0111\u1EC9nh ch\u01B0a \u0111\u01B0\u1EE3c c\u1ED1 \u0111\u1ECBnh (finalized) c\u00F3 <code>dist<\/code> nh\u1ECF nh\u1EA5t, c\u1EADp nh\u1EADt kho\u1EA3ng c\u00E1ch c\u1EE7a c\u00E1c\r\n                n\u00FAt k\u1EC1 b\u1EB1ng thao t\u00E1c \"relaxation\".<\/li>\r\n            <li>Ti\u1EBFp t\u1EE5c cho \u0111\u1EBFn khi t\u1EA5t c\u1EA3 \u0111\u1EC9nh \u0111\u01B0\u1EE3c c\u1ED1 \u0111\u1ECBnh ho\u1EB7c kh\u00F4ng c\u00F2n \u0111\u1EC9nh c\u00F3 th\u1EC3 ti\u1EBFp c\u1EADn.<\/li>\r\n        <\/ul>\r\n\r\n        <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/5\/57\/Dijkstra_Animation.gif\" alt=\"Minh h\u1ECDa Dijkstra\" \/>\r\n\r\n        <h2>Thu\u1EADt to\u00E1n (Algorithm)<\/h2>\r\n        <pre>\r\nDijkstra(graph, source):\r\n    for each vertex v in graph:\r\n        dist[v] = infinity\r\n        previous[v] = undefined\r\n    dist[source] = 0\r\n\r\n    Q = all vertices in graph (min-priority queue ordered by dist)\r\n\r\n    while Q not empty:\r\n        u = extract-min(Q)\r\n        for each neighbor v of u:\r\n            alt = dist[u] + weight(u, v)\r\n            if alt < dist[v]:\r\n                dist[v] = alt\r\n                previous[v] = u\r\n                decrease-key(Q, v, alt)\r\n    return dist[], previous[]\r\n        <\/pre>\r\n\r\n        <h2>M\u00E3 gi\u1EA3 (Pseudocode)<\/h2>\r\n        <pre>\r\nfunction Dijkstra(Graph, source):\r\n    for each vertex v in Graph:\r\n        dist[v] := infinity\r\n        prev[v] := null\r\n    dist[source] := 0\r\n    Q := min-priority-queue containing all vertices keyed by dist[]\r\n\r\n    while Q is not empty:\r\n        u := Extract-Min(Q)\r\n        for each neighbor v of u:\r\n            alt := dist[u] + length(u, v)\r\n            if alt < dist[v]:\r\n                dist[v] := alt\r\n                prev[v] := u\r\n                Decrease-Key(Q, v, alt)\r\n    return dist, prev\r\n        <\/pre>\r\n\r\n        <h2>Tri\u1EC3n khai v\u00ED d\u1EE5<\/h2>\r\n\r\n        <h3>Code C++ (s\u1EED d\u1EE5ng priority_queue)<\/h3>\r\n        <pre>\r\n#include <bits\/stdc++.h>\r\nusing namespace std;\r\nusing pii = pair<int,int>; \/\/ (dist, node)\r\n\r\nvector<vector<pair<int,int>>> adj; \/\/ adj[u] = {(v, w), ...}\r\nvector<int> dijkstra(int n, int source) {\r\n    const int INF = 1e9;\r\n    vector<int> dist(n+1, INF);\r\n    priority_queue<pii, vector<pii>, greater<pii>> pq;\r\n    dist[source] = 0;\r\n    pq.push({0, source});\r\n\r\n    while (!pq.empty()) {\r\n        auto [du, u] = pq.top(); pq.pop();\r\n        if (du != dist[u]) continue;\r\n        for (auto [v, w] : adj[u]) {\r\n            if (dist[u] + w < dist[v]) {\r\n                dist[v] = dist[u] + w;\r\n                pq.push({dist[v], v});\r\n            }\r\n        }\r\n    }\r\n    return dist;\r\n}\r\n        <\/pre>\r\n\r\n        <h3>Code Python (s\u1EED d\u1EE5ng heapq)<\/h3>\r\n        <pre>\r\nimport heapq\r\n\r\ndef dijkstra(n, adj, source):\r\n    INF = 10**18\r\n    dist = [INF] * (n + 1)\r\n    dist[source] = 0\r\n    pq = [(0, source)]\r\n    while pq:\r\n        d, u = heapq.heappop(pq)\r\n        if d != dist[u]:\r\n            continue\r\n        for v, w in adj[u]:\r\n            nd = d + w\r\n            if nd < dist[v]:\r\n                dist[v] = nd\r\n                heapq.heappush(pq, (nd, v))\r\n    return dist\r\n        <\/pre>\r\n\r\n        <h2>Ph\u00E2n t\u00EDch \u0111\u1ED9 ph\u1EE9c t\u1EA1p (Complexity Analysis)<\/h2>\r\n        <ul>\r\n            <li>Tr\u01B0\u1EDDng h\u1EE3p \u0111\u01A1n gi\u1EA3n (ma tr\u1EADn kho\u1EA3ng c\u00E1ch ho\u1EB7c t\u00ECm min b\u1EB1ng linear scan): O(V^2).<\/li>\r\n            <li>S\u1EED d\u1EE5ng priority queue (binary heap): O((V + E) log V) \u2248 O(E log V) cho \u0111\u1ED3 th\u1ECB th\u01B0a.<\/li>\r\n            <li>S\u1EED d\u1EE5ng Fibonacci heap (l\u00FD thuy\u1EBFt): O(V log V + E).<\/li>\r\n            <li>Kh\u00F4ng gian: O(V + E) \u0111\u1EC3 l\u01B0u bi\u1EC3u di\u1EC5n \u0111\u1ED3 th\u1ECB v\u00E0 m\u1EA3ng dist\/prev.<\/li>\r\n        <\/ul>\r\n\r\n        <h2>T\u00EDnh ch\u1EA5t & l\u01B0u \u00FD<\/h2>\r\n        <ul>\r\n            <li>\u0110\u00F2i h\u1ECFi: t\u1EA5t c\u1EA3 tr\u1ECDng s\u1ED1 c\u1EA1nh ph\u1EA3i kh\u00F4ng \u00E2m. N\u1EBFu c\u00F3 c\u1EA1nh \u00E2m, d\u00F9ng Bellman-Ford.<\/li>\r\n            <li>Dijkstra t\u00ECm \u0111\u01B0\u1EDDng ng\u1EAFn nh\u1EA5t t\u1EEB m\u1ED9t ngu\u1ED3n \u0111\u1EBFn m\u1ECDi \u0111\u1EC9nh kh\u00E1c (single-source shortest path).<\/li>\r\n            <li>N\u1EBFu b\u1EA1n ch\u1EC9 c\u1EA7n \u0111\u01B0\u1EDDng ng\u1EAFn nh\u1EA5t gi\u1EEFa hai \u0111\u1EC9nh, c\u00F3 th\u1EC3 d\u00F9ng bi\u1EBFn th\u1EC3 bidirectional Dijkstra \u0111\u1EC3 t\u0103ng t\u1ED1c.\r\n            <\/li>\r\n            <li>\u0110\u1ED9 ph\u1EE9c t\u1EA1p th\u1EF1c t\u1EBF ph\u1EE5 thu\u1ED9c v\u00E0o c\u1EA5u tr\u00FAc d\u1EEF li\u1EC7u cho h\u00E0ng \u0111\u1EE3i \u01B0u ti\u00EAn v\u00E0 bi\u1EC3u di\u1EC5n \u0111\u1ED3 th\u1ECB (adjacency\r\n                list hay matrix).<\/li>\r\n        <\/ul>\r\n\r\n        <h2>\u1EE8ng d\u1EE5ng (Applications)<\/h2>\r\n        <ul>\r\n            <li>H\u1EC7 th\u1ED1ng \u0111\u1ECBnh tuy\u1EBFn m\u1EA1ng (v\u00ED d\u1EE5: OSPF s\u1EED d\u1EE5ng c\u01A1 ch\u1EBF t\u01B0\u01A1ng t\u1EF1).<\/li>\r\n            <li>H\u1EC7 th\u1ED1ng b\u1EA3n \u0111\u1ED3 v\u00E0 GPS: t\u00EDnh kho\u1EA3ng c\u00E1ch t\u1ED1i thi\u1EC3u tr\u00EAn \u0111\u1ED3 th\u1ECB \u0111\u01B0\u1EDDng b\u1ED9 (khi tr\u1ECDng s\u1ED1 kh\u00F4ng \u00E2m).<\/li>\r\n            <li>Robot path planning trong m\u00F4i tr\u01B0\u1EDDng c\u00F3 chi ph\u00ED di chuy\u1EC3n kh\u00E1c nhau.<\/li>\r\n            <li>T\u1ED1i \u01B0u h\u00F3a logistics, l\u1EADp l\u1ECBch v\u00E0 ph\u00E2n t\u00EDch \u0111\u01B0\u1EDDng \u0111i trong s\u01A1 \u0111\u1ED3 v\u1EADn h\u00E0nh.<\/li>\r\n            <li>L\u00E0 nh\u00E2n t\u1ED1 c\u01A1 b\u1EA3n \u0111\u1EC3 ph\u00E1t tri\u1EC3n c\u00E1c thu\u1EADt to\u00E1n ph\u1EE9c t\u1EA1p h\u01A1n (A*, Johnson's algorithm, v.v.).<\/li>\r\n        <\/ul>\r\n\r\n        <h2>K\u1EBFt lu\u1EADn<\/h2>\r\n        <p>\r\n            Dijkstra l\u00E0 m\u1ED9t c\u00F4ng c\u1EE5 c\u1EF1c k\u1EF3 quan tr\u1ECDng trong khoa h\u1ECDc m\u00E1y t\u00EDnh v\u00E0 k\u1EF9 thu\u1EADt. V\u1EDBi vi\u1EC7c l\u1EF1a ch\u1ECDn \u0111\u00FAng c\u1EA5u\r\n            tr\u00FAc d\u1EEF li\u1EC7u (v\u00ED d\u1EE5: heap), thu\u1EADt to\u00E1n c\u00F3 th\u1EC3 x\u1EED l\u00FD hi\u1EC7u qu\u1EA3 c\u00E1c \u0111\u1ED3 th\u1ECB l\u1EDBn.\r\n            Tuy nhi\u00EAn, c\u1EA7n l\u01B0u \u00FD tr\u1ECDng s\u1ED1 c\u1EA1nh ph\u1EA3i kh\u00F4ng \u00E2m; trong c\u00E1c tr\u01B0\u1EDDng h\u1EE3p c\u00F3 c\u1EA1nh \u00E2m ho\u1EB7c y\u00EAu c\u1EA7u t\u1ED1i \u01B0u tr\u00EAn\r\n            nhi\u1EC1u ngu\u1ED3n\/\u0111a ti\u00EAu ch\u00ED, c\u1EA7n c\u00E2n nh\u1EAFc c\u00E1c thu\u1EADt to\u00E1n kh\u00E1c.\r\n        <\/p>\r\n    <\/div>"
  }
}
