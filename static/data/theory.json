{
  "dfs": {
    "title": "Depth First Search (DFS)",
    "overview": "<p>DFS hoạt động theo nguyên tắc đi sâu nhất có thể...</p>"
  },
  "dijkstra": {
    "title": "Dijkstra Algorithm",
    "overview": "<div class=\"container\">\r\n          \r\n            <p>\r\n            <ul>\r\n                <li>Duy\u1EC7t theo \u0111\u1ED9 d\u00E0i \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t (chi ph\u00ED nh\u1ECF nh\u1EA5t), kh\u00F4ng theo chi\u1EC1u s\u00E2u hay r\u1ED9ng.<\/li>\r\n                <li>S\u1EED d\u1EE5ng chi\u1EBFn l\u01B0\u1EE3c tham lam (greedy): lu\u00F4n ch\u1ECDn \u0111\u1EC9nh c\u00F3 kho\u1EA3ng c\u00E1ch t\u1EA1m th\u1EDDi nh\u1ECF nh\u1EA5t ch\u01B0a \u0111\u01B0\u1EE3c x\u1EED l\u00FD.<\/li>\r\n                <li>Ch\u1EC9 ho\u1EA1t \u0111\u1ED9ng \u0111\u00FAng khi tr\u1ECDng s\u1ED1 c\u1EA1nh kh\u00F4ng \u00E2m.<\/li>\r\n                <li>M\u1EE5c ti\u00EAu: t\u00ECm \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t t\u1EEB ngu\u1ED3n \u0111\u1EBFn t\u1EA5t c\u1EA3 c\u00E1c \u0111\u1EC9nh (ho\u1EB7c m\u1ED9t \u0111\u00EDch c\u1EE5 th\u1EC3).<\/li>\r\n                <li>C\u00E1ch ho\u1EA1t \u0111\u1ED9ng: gi\u1ED1ng BFS c\u00F3 tr\u1ECDng s\u1ED1 \u2014 thay v\u00EC duy\u1EC7t t\u1EA7ng theo s\u1ED1 b\u01B0\u1EDBc, n\u00F3 duy\u1EC7t theo t\u1ED5ng tr\u1ECDng s\u1ED1 nh\u1ECF nh\u1EA5t.<\/li>\r\n            <\/ul>\r\n            <\/p>\r\n            <h2>\u00DD t\u01B0\u1EDFng (Idea)<\/h2>\r\n                <p>B\u1EAFt \u0111\u1EA7u t\u1EEB \u0111\u1EC9nh ngu\u1ED3n (source):<\/p>\r\n                    <ul>\r\n                        <li>G\u00E1n cho n\u00F3 kho\u1EA3ng c\u00E1ch b\u1EB1ng 0.<\/li>\r\n                        <li>G\u00E1n kho\u1EA3ng c\u00E1ch v\u00F4 h\u1EA1n (\u221E) cho t\u1EA5t c\u1EA3 c\u00E1c \u0111\u1EC9nh kh\u00E1c.<\/li>\r\n                    <\/ul>\r\n                <p>Ch\u1ECDn \u0111\u1EC9nh g\u1EA7n nh\u1EA5t ch\u01B0a x\u00E9t:<\/p>\r\n                    <ul>\r\n                        <li>Trong m\u1ED7i v\u00F2ng l\u1EB7p, ch\u1ECDn \u0111\u1EC9nh c\u00F3 kho\u1EA3ng c\u00E1ch nh\u1ECF nh\u1EA5t trong s\u1ED1 c\u00E1c \u0111\u1EC9nh ch\u01B0a \u0111\u01B0\u1EE3c duy\u1EC7t.<\/li>\r\n                        <li>\u0110\u1EC9nh n\u00E0y \u0111\u01B0\u1EE3c xem l\u00E0 \u0111\u00E3 t\u00ECm \u0111\u01B0\u1EE3c \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t t\u1EEB ngu\u1ED3n \u2192 n\u00F3 s\u1EBD kh\u00F4ng thay \u0111\u1ED5i n\u1EEFa.<\/li>\r\n                    <\/ui>\r\n            <p>C\u1EADp nh\u1EADt c\u00E1c \u0111\u1EC9nh k\u1EC1:<\/p>\r\n            <ul>\r\n                <li>V\u1EDBi m\u1ED7i \u0111\u1EC9nh k\u1EC1 v c\u1EE7a \u0111\u1EC9nh \u0111ang x\u00E9t u, n\u1EBFu \u0111i qua u gi\u00FAp \u0111\u01B0\u1EDDng \u0111i \u0111\u1EBFn v ng\u1EAFn h\u01A1n th\u00EC c\u1EADp nh\u1EADp l\u1EA1i kho\u1EA3ng c\u00E1ch c\u1EE7a v:\r\n                    <li>dist[v]>dist[u] +w(u,v) th\u00EC dist[v] =dist[u]+ w(u,v) trong \u0111\u00F3 w(u,v)l\u00E0 tr\u1ECDng s\u1ED1 c\u1EA1nh.)\r\n                    <\/li>\r\n                <\/li>\r\n            <\/ul>\r\n            <p>L\u1EB7p l\u1EA1i qu\u00E1 tr\u00ECnh:<\/p>\r\n            <ul>\r\n                <li>Ti\u1EBFp t\u1EE5c ch\u1ECDn \u0111\u1EC9nh g\u1EA7n nh\u1EA5t ch\u01B0a x\u00E9t v\u00E0 c\u1EADp nh\u1EADt c\u00E1c \u0111\u1EC9nh k\u1EC1 cho \u0111\u1EBFn khi t\u1EA5t c\u1EA3 c\u00E1c \u0111\u1EC9nh \u0111\u01B0\u1EE3c duy\u1EC7t ho\u1EB7c \u0111\u00EDch \u0111\u01B0\u1EE3c x\u1EED l\u00FD.<\/li>\r\n            <\/ul>\r\n            <h2>M\u00E3 gi\u1EA3 (Pseudocode)<\/h2>\r\n            <pre>\r\n            Dijkstra(Graph G, node s):\r\n                for each vertex v in G:\r\n                    dist[v] \u2190 \u221E\r\n                    parent[v] \u2190 null\r\n                 dist[s] \u2190 0\r\n                 Q \u2190 all vertices in G     \/\/ h\u00E0ng \u0111\u1EE3i \u01B0u ti\u00EAn\r\n                 while Q is not empty:\r\n                    u \u2190 vertex in Q with smallest dist[u]\r\n                    remove u from Q\r\n                    for each neighbor v of u:\r\n                        alt \u2190 dist[u] + weight(u, v)\r\n                        if alt < dist[v]:\r\n                            dist[v] \u2190 alt\r\n                            parent[v] \u2190 u\r\n            <\/pre>\r\n            <ul>\r\n                <li><b>dist[v]:<\/b> kho\u1EA3ng c\u00E1ch ng\u1EAFn nh\u1EA5t t\u1EEB \u0111\u1EC9nh ngu\u1ED3n <b>s <\/b>\u0111\u1EBFn \u0111\u1EC9nh <b>v<\/b>.<\/li>\r\n<li><b>parent[v] :<\/b> l\u01B0u l\u1EA1i \u0111\u1EC9nh tr\u01B0\u1EDBc \u0111\u00F3 \u0111\u1EC3 d\u1EF1ng l\u1EA1i \u0111\u01B0\u1EDDng \u0111i.<\/li>\r\n                <li><b>w(u, v)<\/b>ho\u1EB7c <b>w(u, v):<\/b> tr\u1ECDng s\u1ED1 c\u1EA1nh t\u1EEB \u0111\u1EC9nh <b>u<\/b> \u0111\u1EBFn \u0111\u1EC9nh <b>v<\/b>.<\/li>\r\n                <li>H\u00E0ng \u0111\u1EE3i \u01B0u ti\u00EAn<b>(priority queue)<\/b> gi\u00FAp ch\u1ECDn \u0111\u1EC9nh c\u00F3 <b>dist<\/b> nh\u1ECF nh\u1EA5t nhanh h\u01A1n.<\/li>\r\n            <\/ul>\r\n\r\n            <h2>Tri\u1EC3n khai b\u1EB1ng c\u00E1c ng\u00F4n ng\u1EEF ph\u1ED5 bi\u1EBFn<\/h2>\r\n            <b>Code C++<\/b>\r\n            <pre>\r\n                #include <bits\/stdc++.h>\r\n                using namespace std;\r\n\r\n                const int INF = 1e9; \/\/ Gi\u00E1 tr\u1ECB v\u00F4 c\u00F9ng (r\u1EA5t l\u1EDBn)\r\n                vector<pair<int,int>> adj[1001]; \/\/ adj[u] = danh s\u00E1ch (\u0111\u1EC9nh k\u1EC1, tr\u1ECDng s\u1ED1)\r\n                int dist[1001];  \/\/ L\u01B0u kho\u1EA3ng c\u00E1ch ng\u1EAFn nh\u1EA5t\r\n                bool visited[1001];\r\n                int parent[1001]; \/\/ D\u00F9ng \u0111\u1EC3 truy v\u1EBFt \u0111\u01B0\u1EDDng \u0111i (n\u1EBFu c\u1EA7n)\r\n\r\n                void Input() {\r\n                    int n, m; \/\/ n: s\u1ED1 \u0111\u1EC9nh, m: s\u1ED1 c\u1EA1nh\r\n                    cin >> n >> m;\r\n                    for (int i = 0; i < m; i++) {\r\n                        int u, v, w;\r\n                        cin >> u >> v >> w; \/\/ c\u1EA1nh t\u1EEB u \u0111\u1EBFn v c\u00F3 tr\u1ECDng s\u1ED1 w\r\n                        adj[u].push_back({v, w});\r\n                        adj[v].push_back({u, w}); \/\/ n\u1EBFu l\u00E0 \u0111\u1ED3 th\u1ECB v\u00F4 h\u01B0\u1EDBng\r\n                     }\r\n                    for (int i = 1; i <= n; i++) {\r\n                         dist[i] = INF;\r\n                         visited[i] = false;\r\n                         parent[i] = -1;\r\n                     }\r\n                }\r\n                void Dijkstra(int start) {\r\n                     priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;\r\n                    dist[start] = 0;\r\n                    pq.push({0, start});\r\n                    while (!pq.empty()) {\r\n                         int u = pq.top().second;\r\n                         pq.pop();\r\n                         if (visited[u]) continue;\r\n                         visited[u] = true;\r\n                        \/\/ Duy\u1EC7t t\u1EA5t c\u1EA3 \u0111\u1EC9nh k\u1EC1 c\u1EE7a u\r\n                         for (auto edge : adj[u]) {\r\n                             int v = edge.first;\r\n                             int w = edge.second;\r\n                         \/\/ N\u1EBFu t\u00ECm \u0111\u01B0\u1EE3c \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn h\u01A1n\r\n                         if (dist[v] > dist[u] + w) {\r\n                            dist[v] = dist[u] + w;\r\n                            parent[v] = u;\r\n                            pq.push({dist[v], v});\r\n                         }\r\n                     }\r\n                 }\r\n            }\r\n            int main() {\r\n                Input();\r\n                int start;\r\n                cout << \"Nhap dinh bat dau: \";\r\n                cin >> start;\r\n                Dijkstra(start);\r\n                cout << \"Khoang cach ngan nhat tu dinh \" << start << \":\\n\";\r\n                for (int i = 1; i <= 1000; i++) {\r\nif (dist[i] != INF)\r\n                     cout << \" -> \" << i << \": \" << dist[i] << endl;\r\n                    }\r\n                return 0;\r\n            }\r\n        <\/pre>\r\n\r\n            <b>Code Java<\/b>\r\n            <pre>\r\n                import java.util.*;\r\n                \/\/ L\u1EDBp m\u00F4 t\u1EA3 c\u1EA1nh (\u0111\u1EC9nh k\u1EC1, tr\u1ECDng s\u1ED1)\r\n                class Edge {\r\n                    int to;\r\n                    int weight;\r\n\r\n                    Edge(int to, int weight) {\r\n                        this.to = to;\r\n                        this.weight = weight;\r\n                    }\r\n                }\r\n                public class DijkstraExample {\r\n                    static final int INF = 1000000000; \/\/ Gi\u00E1 tr\u1ECB v\u00F4 c\u00F9ng l\u1EDBn\r\n                    static ArrayList<Edge>[] adj; \/\/ Danh s\u00E1ch k\u1EC1\r\n                    static int[] dist;            \/\/ Kho\u1EA3ng c\u00E1ch ng\u1EAFn nh\u1EA5t\r\n                    static boolean[] visited;     \/\/ \u0110\u00E1nh d\u1EA5u \u0111\u1EC9nh \u0111\u00E3 th\u0103m\r\n                    static int[] parent;          \/\/ D\u00F9ng \u0111\u1EC3 l\u01B0u \u0111\u01B0\u1EDDng \u0111i (n\u1EBFu c\u1EA7n)\r\n\r\n                    @SuppressWarnings(\"unchecked\")\r\n                    public static void input() {\r\n                        Scanner sc = new Scanner(System.in);\r\n                        System.out.print(\"Nhap so dinh n va so canh m: \");\r\n                        int n = sc.nextInt();\r\n                        int m = sc.nextInt();\r\n                        \/\/ Kh\u1EDFi t\u1EA1o danh s\u00E1ch k\u1EC1\r\n                        adj = new ArrayList[n + 1];\r\n                        for (int i = 1; i <= n; i++) {\r\n                            adj[i] = new ArrayList<>();\r\n                        }\r\n                        System.out.println(\"Nhap cac canh (u v w): \");\r\n                        for (int i = 0; i < m; i++) {\r\n                            int u = sc.nextInt();\r\n                            int v = sc.nextInt();\r\n                            int w = sc.nextInt();\r\n                            adj[u].add(new Edge(v, w));\r\n                            adj[v].add(new Edge(u, w)); \/\/ N\u1EBFu \u0111\u1ED3 th\u1ECB v\u00F4 h\u01B0\u1EDBng\r\n                        }\r\n                        dist = new int[n + 1];\r\n                        visited = new boolean[n + 1];\r\n                        parent = new int[n + 1];\r\n\r\n                        Arrays.fill(dist, INF);\r\n                        Arrays.fill(parent, -1);\r\n                    }\r\n                    public static void dijkstra(int start) {\r\n                        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));\r\n                        dist[start] = 0;\r\n                        pq.add(new int[]{0, start}); \/\/ {kho\u1EA3ng c\u00E1ch, \u0111\u1EC9nh}\r\n                        while (!pq.isEmpty()) {\r\n                            int[] node = pq.poll();\r\n                            int u = node[1];\r\n                            if (visited[u]) continue;\r\n                            visited[u] = true;\r\nfor (Edge e : adj[u]) {\r\n                                int v = e.to;\r\n                                int w = e.weight;\r\n                                if (dist[v] > dist[u] + w) {\r\n                                    dist[v] = dist[u] + w;\r\n                                    parent[v] = u;\r\n                                    pq.add(new int[]{dist[v], v});\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    public static void main(String[] args) {\r\n                        input();\r\n                        Scanner sc = new Scanner(System.in);\r\n                        System.out.print(\"Nhap dinh bat dau: \");\r\n                        int start = sc.nextInt();\r\n                        dijkstra(start);\r\n                        System.out.println(\"Khoang cach ngan nhat tu dinh \" + start + \":\");\r\n                        for (int i = 1; i < dist.length; i++) {\r\n                            if (dist[i] != INF)\r\n                                System.out.println(\" -> \" + i + \": \" + dist[i]);\r\n                        }\r\n                    }\r\n                }\r\n            <\/pre>\r\n            <b>Code Python<\/b>\r\n            <pre>\r\n                import heapq\r\n                def input_graph():\r\n                    n, m = map(int, input(\"Nh\u1EADp s\u1ED1 \u0111\u1EC9nh n v\u00E0 s\u1ED1 c\u1EA1nh m: \").split())\r\n                    # T\u1EA1o danh s\u00E1ch k\u1EC1 (adjacency list)\r\n                    adj = [[] for _ in range(n + 1)]\r\n                    print(\"Nh\u1EADp c\u00E1c c\u1EA1nh (u v w): \")\r\n                    for _ in range(m):\r\n                        u, v, w = map(int, input().split())\r\n                        adj[u].append((v, w))\r\n                        adj[v].append((u, w))  # N\u1EBFu \u0111\u1ED3 th\u1ECB v\u00F4 h\u01B0\u1EDBng th\u00EC th\u00EAm d\u00F2ng n\u00E0y\r\n                    return n, adj\r\n                # Thu\u1EADt to\u00E1n Dijkstra\r\n                def dijkstra(n, adj, start):\r\n                    INF = 10**9\r\n                    dist = [INF] * (n + 1)\r\n                    parent = [-1] * (n + 1)\r\n                    visited = [False] * (n + 1)\r\n                    dist[start] = 0\r\n                    pq = []  # h\u00E0ng \u0111\u1EE3i \u01B0u ti\u00EAn (min-heap)\r\n                    heapq.heappush(pq, (0, start))  # (kho\u1EA3ng c\u00E1ch, \u0111\u1EC9nh)\r\n                    while pq:\r\n                        du, u = heapq.heappop(pq)\r\n                        if visited[u]:\r\n                            continue\r\n                        visited[u] = True\r\n                        # Duy\u1EC7t t\u1EA5t c\u1EA3 c\u00E1c \u0111\u1EC9nh k\u1EC1 c\u1EE7a u\r\n                        for v, w in adj[u]:\r\n                            if dist[v] > du + w:\r\n                                dist[v] = du + w\r\n                                parent[v] = u\r\n                                heapq.heappush(pq, (dist[v], v))\r\n                    return dist, parent\r\n# H\u00E0m in k\u1EBFt qu\u1EA3\r\n                def print_result(start, dist):\r\n                    print(f\"\\nKho\u1EA3ng c\u00E1ch ng\u1EAFn nh\u1EA5t t\u1EEB \u0111\u1EC9nh {start}:\")\r\n                    for i in range(1, len(dist)):\r\n                        if dist[i] == 10**9:\r\n                            print(f\" -> {i}: kh\u00F4ng c\u00F3 \u0111\u01B0\u1EDDng \u0111i\")\r\n                        else:\r\n                            print(f\" -> {i}: {dist[i]}\")\r\n                if __name__ == \"__main__\":\r\n                    n, adj = input_graph()\r\n                    start = int(input(\"Nh\u1EADp \u0111\u1EC9nh b\u1EAFt \u0111\u1EA7u: \"))\r\n                    dist, parent = dijkstra(n, adj, start)\r\n                    print_result(start, dist)\r\n            <\/pre>\r\n            \r\n            <h2>Ph\u00E2n t\u00EDch \u0111\u1ED9 ph\u1EE9c t\u1EA1p (Complexity Analysis)<\/h2>\r\n            <ul>\r\n                <li>Th\u1EDDi gian (Time Complexity): O((V+E)logV)\u200B<\/li>\r\n                    <ul>\r\n                        <li>V l\u00E0 s\u1ED1 n\u00FAt (vertices)<\/li>\r\n                        <li>E l\u00E0 s\u1ED1 c\u1EA1nh (edges)<\/li>\r\n                        M\u1ED7i \u0111\u1EC9nh \u0111\u01B0\u1EE3c th\u0103m 1 l\u1EA7n, m\u1ED7i c\u1EA1nh duy\u1EC7t t\u1ED1i \u0111a 2 l\u1EA7n (\u0111\u1ED3 th\u1ECB v\u00F4 h\u01B0\u1EDBng).\r\n                    <\/ul>\r\n                <li>Kh\u00F4ng gian (Space Complexity): O(V + E)<\/li>\r\n                    <ul>\r\n                        <li>\u0110\u1EC3 l\u01B0u m\u1EA3ng visited v\u00E0 ng\u0103n x\u1EBFp \u0111\u1EC7 quy (trong tr\u01B0\u1EDDng h\u1EE3p x\u1EA5u nh\u1EA5t, stack s\u00E2u b\u1EB1ng s\u1ED1 \u0111\u1EC9nh).<\/li>\r\n                    <\/ul>\r\n            <\/ul>\r\n            <h2>T\u00EDnh ch\u1EA5t, \u0111\u1EB7c \u0111i\u1EC3m & nh\u1EEFng l\u01B0u \u00FD (Properties, Characteristic, Notes)<\/h2>\r\n            <p><b>1.T\u00EDnh ch\u1EA5t:<\/b><\/p>\r\n            <ul>\r\n                <li>Dijkstra l\u00E0 thu\u1EADt to\u00E1n tham lam (Greedy Algorithm) \u2192 lu\u00F4n ch\u1ECDn \u0111\u1EC9nh c\u00F3 kho\u1EA3ng c\u00E1ch nh\u1ECF nh\u1EA5t ch\u01B0a \u0111\u01B0\u1EE3c th\u0103m \u1EDF m\u1ED7i b\u01B0\u1EDBc.<\/li>\r\n                <li>M\u1ED7i \u0111\u1EC9nh ch\u1EC9 \u0111\u01B0\u1EE3c g\u00E1n kho\u1EA3ng c\u00E1ch ng\u1EAFn nh\u1EA5t m\u1ED9t l\u1EA7n duy nh\u1EA5t (khi n\u00F3 \u0111\u01B0\u1EE3c ch\u1ECDn ra kh\u1ECFi h\u00E0ng \u0111\u1EE3i \u01B0u ti\u00EAn).<\/li>\r\n                <li>B\u1EA3o \u0111\u1EA3m t\u00ECm \u0111\u01B0\u1EE3c \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t t\u1EEB m\u1ED9t \u0111\u1EC9nh ngu\u1ED3n (source) \u0111\u1EBFn t\u1EA5t c\u1EA3 c\u00E1c \u0111\u1EC9nh c\u00F2n l\u1EA1i trong \u0111\u1ED3 th\u1ECB c\u00F3 tr\u1ECDng s\u1ED1 kh\u00F4ng \u00E2m.<\/li>\r\n            <\/ul>\r\n\r\n            <p><b>2.\u0110\u1EB7c \u0111i\u1EC3m:<\/b><\/p>\r\n            <ul>\r\n                <li>Ho\u1EA1t \u0111\u1ED9ng t\u1ED1t tr\u00EAn \u0111\u1ED3 th\u1ECB c\u00F3 tr\u1ECDng s\u1ED1 d\u01B0\u01A1ng ho\u1EB7c b\u1EB1ng 0.<\/li>\r\n                <li>Cho k\u1EBFt qu\u1EA3 l\u00E0:\r\n                    <ul>\r\n                        <li>M\u1EA3ng <b>dist[]<\/b>: ch\u1EE9a kho\u1EA3ng c\u00E1ch ng\u1EAFn nh\u1EA5t t\u1EEB ngu\u1ED3n \u0111\u1EBFn c\u00E1c \u0111\u1EC9nh kh\u00E1c.<\/li>\r\n                        <li>M\u1EA3ng <b>parent[]<\/b>: d\u00F9ng \u0111\u1EC3 truy v\u1EBFt l\u1EA1i \u0111\u01B0\u1EDDng \u0111i.<\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n            <\/ul>\r\n            <h2>\u1EE8ng d\u1EE5ng (Applications)<\/h2>\r\n            <p>M\u1ED9t s\u1ED1 \u1EE9ng d\u1EE5ng n\u1ED5i b\u1EADt<\/p>\r\n                <ul>\r\n                    <li>T\u00ECm \u0111\u01B0\u1EDDng \u0111i ng\u1EAFn nh\u1EA5t trong b\u1EA3n \u0111\u1ED3 v\u00E0 h\u1EC7 th\u1ED1ng \u0111\u1ECBnh v\u1ECB (GPS).<\/li>\r\n<li>M\u1EA1ng m\u00E1y t\u00EDnh (Computer Networks).<\/li>\r\n                    <li>Tr\u00ED tu\u1EC7 nh\u00E2n t\u1EA1o & Game.<\/li>\r\n                    <li>\u1EE8ng d\u1EE5ng trong h\u1EC7 th\u1ED1ng \u0111i\u1EC1u ph\u1ED1i taxi, xe t\u1EA3i, giao h\u00E0ng (Grab, GHTK, GHN, Viettel Post, v.v.)..<\/li>\r\n                    <li>T\u00ECm \u0111\u01B0\u1EDDng tr\u00E1nh v\u1EADt c\u1EA3n.<\/li>\r\n                <\/ul>\r\n            <ul> \r\n        <\/div>"
  },
  "bfs": {
    "title": "Breadth-First Search (BFS)",
    "overview": "<div class=\"container\""
  }
}
